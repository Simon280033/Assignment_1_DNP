// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Assignment_1.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\_Imports.razor"
using Assignment_1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\_Imports.razor"
using Assignment_1.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\Pages\View_adults.razor"
using Microsoft.AspNetCore.Mvc.ModelBinding.Binders;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\Pages\View_adults.razor"
using Microsoft.Extensions.DependencyInjection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\Pages\View_adults.razor"
using Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\Pages\View_adults.razor"
using Assigntment_2_Web_API;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/view_adults")]
    public partial class View_adults : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 172 "C:\Users\simon\RiderProjects\Assignment_2_DNP_Client\Assignment 1\Pages\View_adults.razor"
       
    // Filters
    private string nameSearch = "";
    private string jobSearch = "";
    private string gender = "any";
    private string ageFilter = "all";
    private int ageSearch = 0;
    private string heightFilter = "all";
    private int heightSearch = 0;
    private string weightFilter = "all";
    private int weightSearch = 0;
    private string salaryFilter = "all";
    private int salary = 0;
    private string eyeFilter = "all";
    private string hairFilter = "all";
    private IList<String> eyeColors = new List<String>();
    private IList<String> hairColors = new List<String>();

    private bool hideInfo = true;
    private bool hideInfoText = true;
    private bool hideEdit = true;
    private string editButtonText = "Edit adult";
    private string errorMessage = "";
    private string successMessage = "";

    private readonly string HeaderStyle = "text-shadow:0px 0px 2px black; background-color: #d1d1d1;";
    private IList<Adult> adults = new List<Adult>(new Adult[0]);

    private Adult selectedAdult;

    private string infoText = "No adult selected";
    
    // Properties
    private string firstName = "";
    private string lastName = "";
    private string eyeColor = "any";
    private string hairColor = "all";
    private int height = 0;
    private int weight = 0;
    private int age = 0;

    protected override async Task OnInitializedAsync()
    {
        Start();
    }
    
    public async void Start()
    {
        if (TheUser.userName == null)
        {
            Console.WriteLine("User is null! Navigating to login...");

            NavigationManager.NavigateTo("/login");
        }
        else
        {
            adults = await AdultsService.GetAdultsAsync();
            SetDropDowns(adults);
            StateHasChanged();
        }
    }

    public async void SetDropDowns(IList<Adult> adultList)
    {
        foreach (var adult in adultList)
        {
            if (!eyeColors.Contains(adult.eyeColor))
            {
                eyeColors.Add(adult.eyeColor);
            }
            if (!hairColors.Contains(adult.hairColor))
            {
                hairColors.Add(adult.hairColor);
            }
        }
    }

    public async void EditAdult()
    {
        if (AllFilled())
        {
            selectedAdult.firstName = firstName;
            selectedAdult.lastName = lastName;
            selectedAdult.eyeColor = eyeColor;
            selectedAdult.hairColor = hairColor;
            selectedAdult.height = height;
            selectedAdult.weight = weight;
            selectedAdult.age = age;
            await AdultsService.UpdateAsync(selectedAdult);
            Console.WriteLine("Adult edited!");
            successMessage = "Successfully edited adult!";
            errorMessage = "";
            ToggleEdit();
            StateHasChanged();
        }
    }
    
    public bool AllFilled() 
    {
            int empties = 0;
            errorMessage = "";
    
            if (firstName.Equals("") || firstName == null)
            {
                empties++;
            }
            if (lastName.Equals("") || lastName == null)
            {
                empties++;
            }
            if (age < 1 || age > 120)
            {
                empties++;
            }
            if (height < 1 || height > 300)
            {
                empties++;
            }
            if (weight < 1 || weight > 300)
            {
                empties++;
            }
            if (eyeColor.Equals("") || eyeColor == null)
            {
                empties++;
            }
            if (hairColor.Equals("") || hairColor == null)
            {
                empties++;
            }
            if (empties != 0)
            {
                errorMessage = "Please fill out all the fields with proper values!";
                successMessage = "";
            }
            return (empties == 0);
    }

    public void HideInfo()
    {
        hideInfo = true;
        hideInfoText = true;
        hideEdit = true;
        infoText = "";
        editButtonText = "Edit adult";
    }
    
    public void ToggleEdit() 
    {
        hideEdit = !hideEdit;
        hideInfoText = !hideEdit;
        if (hideEdit) 
        {
        editButtonText = "Edit adult";
        } 
        else
        {
        editButtonText = "Cancel edit";
        }
    }

    public void ShowInfo(Adult adult)
    {
        errorMessage = "";
        successMessage = "";
                    
        selectedAdult = adult;
        String infoToShow = BuildInfoText(adult);
        if (!infoText.Equals(infoToShow))
        {
            infoText = infoToShow;
            SetInfo();
            hideInfo = false;
            hideInfoText = false;
        }
        else
        {
            hideInfo = true;
            infoText = "No adult selected";
        }
        hideEdit = true;
    }

    public void SetInfo()
    {
        firstName = selectedAdult.firstName;
        lastName = selectedAdult.lastName;
        eyeColor = selectedAdult.eyeColor;
        hairColor = selectedAdult.hairColor;
        height = selectedAdult.height;
        weight = (int) selectedAdult.weight;
        age = selectedAdult.age;
    }
    
    public string BuildInfoText(Adult adult)
    {
        string str = "Info for '" + adult.firstName + " " + adult.lastName + "':\n\n";

        str += "ID: " + adult.id + "\n";
        str += "First name: " + adult.firstName + "\n";
        str += "Last name: " + adult.lastName + "\n";
        str += "Age: " + adult.age + "\n";
        str += "Sex: " + adult.sex + "\n";
        str += "Height: " + adult.height + "\n";
        str += "Weight: " + adult.weight + "\n";
        str += "Hair color: " + adult.hairColor + "\n";
        str += "Eye color: " + adult.eyeColor + "\n";
        if (adult.job == null)
        {
            Console.WriteLine("No job!");
        }
        else
        {
            str += "Job title: " + adult.job.jobTitle + "\n";
            str += "Salary: " + adult.job.salary + "\n";
        }

        return str;
    }

    public async void Search()
    {
        IList<Adult> allAdults = await AdultsService.GetAdultsAsync();

    IList<Adult> tempAdults = new List<Adult>();

        // We check filters
        foreach (var adult in allAdults)
        {
            bool passes = true;
    // Name
                if (!(adult.firstName.ToLower().Contains(nameSearch.ToLower()) || adult.lastName.ToLower().Contains(nameSearch.ToLower()) || (adult.firstName + " " + adult.lastName).ToLower().Contains(nameSearch.ToLower())))
                {
                    passes = false;
                    continue;
                }
                else
                {
    // Job
                    if (!(adult.job.jobTitle.Equals("") || adult.job.jobTitle.ToLower().Contains(jobSearch.ToLower())))
                    {
                        passes = false;
                        continue;
                    }
                    else
                    {
    // Gender
                        if (!(adult.sex.Equals(gender) || gender.Equals("any")))
                        {
                            passes = false;
                            continue;
                        }
                        else
                        {
    // Age
                            if (!(ageFilter.Equals("all")))
                            {
                                if (ageFilter.Equals("above") && adult.age < ageSearch)
                                {
                                    passes = false;
                                    continue;
                                }
                                else if (ageFilter.Equals("below") && adult.age > ageSearch)
                                {
                                    passes = false;
                                    continue;
                                }
                            }
    // Height
                                if (!(heightFilter.Equals("all")))
                                {
                                    if (heightFilter.Equals("above") && adult.height < heightSearch)
                                    {
                                        passes = false;
                                        continue;
                                    }
                                    else if (heightFilter.Equals("below") && adult.height > heightSearch)
                                    {
                                        passes = false;
                                        continue;
                                    }
                                }
    // Weight
                                    if (!(weightFilter.Equals("all")))
                                    {
                                        if (weightFilter.Equals("above") && adult.weight < weightSearch)
                                        {
                                            passes = false;
                                            continue;
                                        }
                                        else if (weightFilter.Equals("below") && adult.weight > weightSearch)
                                        {
                                            passes = false;
                                            continue;
                                        }
                                    }
                            
    // Salary
                            if (!(salaryFilter.Equals("all")))
                            {
                                if (salaryFilter.Equals("above") && adult.job.salary < salary)
                                {
                                    passes = false;
                                    continue;
                                }
                                else if (salaryFilter.Equals("below") && adult.job.salary > salary)
                                {
                                    passes = false;
                                    continue;
                                }
                            }
                            // Eyes
                            if (!(adult.eyeColor.Equals(eyeFilter) || eyeFilter.Equals("all")))
                            {
                                passes = false;
                                continue;
                            }
                            // Hair
                            if (!(adult.hairColor.Equals(hairFilter) || hairFilter.Equals("all")))
                            {
                                passes = false;
                                continue;
                            }
                                }
                            }
                        }
            if (passes)
                {
                    Console.WriteLine(adult.firstName + " passes filters!");
                    tempAdults.Add(adult);
                }
            }
        adults = tempAdults;
        
        StateHasChanged();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAdultsService AdultsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private User TheUser { get; set; }
    }
}
#pragma warning restore 1591
