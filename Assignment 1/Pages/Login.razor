@page "/login"
@using Models
@using Assigntment_2_Web_API
@namespace LoginComponent

@inject NavigationManager NavigationManager
@inject User TheUser
@inject IUserService UserService

<h3>Log in/out</h3>

<div class="login-area" hidden="@showLogin">
<div class="form-group">
            <label>User name:</label>
            <input type="text" placeholder="Username..." @bind-value="username"/>
        </div>
        <div class="form-group">
            <label>Password</label>
            <input type="password" placeholder="Password..." @bind-value="password"/>
        </div>
<div style="color:red">@errorMessage</div>
</div>
<div hidden="@showLogin" class="login-div">
    <button type="button" @onclick="PerformLogin">
        Login 
    </button>
    or
    <a href="register">
        register
    </a>
</div>
<div hidden="@showLogout" class="logout-div">
    <a href="" @onclick="PerformLogout">
            Log out
        </a>
</div>

@code {
    private bool showLogin = true;
    private bool showLogout = false;
    private string username;
    private string password;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        ShowButtons();
    }
    
    public void ShowButtons()
    {
        // If the user is logged in, show logout
        if (TheUser.userName != null)
        {
            Console.WriteLine("User IS logged in!");
            showLogin = true;
            showLogout = false;
        }
        else
        {
    // If not, show login
            Console.WriteLine("User is not logged in!");
            showLogin = false;
            showLogout = true;
        }

    }

    public async Task PerformLogin() {
        errorMessage = "";

        Console.WriteLine("Setting user info...");
        if (username == null || username.Equals("") || password == null || password.Equals(""))
        {
            Console.WriteLine("Lacking info!");
            errorMessage = "Error logging in!";
            return;
        }
        
        // We check if the user exists
        User temp;
        try
        {
            temp = await UserService.GetUser(username);
            if (temp != null)
            {
                if (temp.password.Equals(password))
                {
                    TheUser.userName = temp.userName;
                    TheUser.role = temp.role;
                    Console.WriteLine(TheUser.userName + " logged in!");
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Wrong password!";
                }
            }
            else
            {
                errorMessage = "No user with this username!";
            }
        }
        catch (Exception e)
        {
            errorMessage = "Error: " + e.Message;
            StateHasChanged();
        }
    }

    public void PerformLogout() {
        Console.WriteLine("Wiping user info...");

        username = "";
        password = "";
        errorMessage = "Logout";
        TheUser.userName = null;
        TheUser.role = null;
    }

}