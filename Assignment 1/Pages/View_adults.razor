@page "/view_adults"
@using Microsoft.AspNetCore.Mvc.ModelBinding.Binders
@using Microsoft.Extensions.DependencyInjection
@using Models
@using Assigntment_2_Web_API
@inject User TheUser
@inject NavigationManager NavigationManager
@inject IAdultsService AdultsService

<h3>View adults</h3>

<h5>Filters</h5>

<div class="filters">
    <div class="nameSearch">
        <b><label>Name: </label></b>
        <input placeholder="Name..." @bind-value="nameSearch">
    </div>

    <div class="jobSearch">
        <b><label >Job: </label></b>
        <input placeholder="Job title..." @bind-value="jobSearch">
    </div>

    <div class="sexChoice">
        <b><label for="genders">Gender:</label></b>
        <select id="genders" name="genders" @bind="gender">
            <option value="any">Any</option>
            <option value="M">Male</option>
            <option value="F">Female</option>
        </select>
    </div>

    <div class="ageChoice">
        <b><label for="ages">Age:</label></b>
        <select id="ages" name="ages" @bind="ageFilter">
            <option value="all">Above/below</option>
            <option value="above">Above</option>
            <option value="below">Below</option>
        </select>
        <input type="number" placeholder="Age..." @bind-value="ageSearch">
    </div>

    <div class="heightChoice">
        <b><label for="heights">Height:</label></b>
        <select id="heights" name="heights" @bind="heightFilter">
            <option value="all">Above/below</option>
            <option value="above">Above</option>
            <option value="below">Below</option>
        </select>
        <input type="number" placeholder="Height in cm..." @bind-value="heightSearch">
    </div>

    <div class="weightChoice">
        <b><label for="weights">Weight:</label></b>
        <select id="weights" name="weights" @bind="weightFilter">
            <option value="all">Above/below</option>
            <option value="above">Above</option>
            <option value="below">Below</option>
        </select>
        <input type="number" placeholder="Weight in kg..." @bind-value="weightSearch">
    </div>

    <div class="salaryChoice">
        <b><label for="salaries">Salary:</label></b>
        <select id="salaries" name="salaries" @bind="salaryFilter">
            <option value="all">Above/below</option>
            <option value="above">Above</option>
            <option value="below">Below</option>
        </select>
        <input type="number" placeholder="Salary in DKK..." @bind-value="salary">
    </div>

    <div class="eyeChoice">
        <b><label for="eyeColors">Eye color:</label></b>
        <select id="eyeColors" name="eyeColors" @bind="eyeFilter">
            <option value="all">Any</option>
            @foreach (var eyeColor in eyeColors)
            {
                <option>@eyeColor</option>
            }
        </select>
    </div>

    <div class="hairChoice">
        <b><label for="hairColors">Hair color:</label></b>
        <select id="hairColors" name="hairColors" @bind="hairFilter">
            <option value="all">Any</option>
            @foreach (var hairColor in hairColors)
            {
                <option>@hairColor</option>
            }
        </select>
    </div>
</div>

<button type="button" @onclick="Search">Search</button>

<div hidden="@hideInfo" style="border:2px; border-style:solid; border-color:#d1d1d1; padding: 1em; border-radius: 25px;">
<div style="color:red">@errorMessage</div>
<div style="color:green">@successMessage</div>
    <p style="white-space: pre-wrap;" hidden="@hideInfoText">@infoText</p>
    <div hidden="@hideEdit" class="editAdult">
        <p style="white-space: pre-wrap;">Edit adult</p>

        <div class="firstNameField">
            <label >First name: </label>
            <input placeholder="First name..." @bind-value="firstName">
        </div>
        
        <div class="lastNameField">
            <label >Last name: </label>
            <input placeholder="Last name..." @bind-value="lastName">
        </div>

        <div class="ageField">
            <label>Age:</label>
            <input type="number" placeholder="Age..." @bind-value="age">
        </div>
        
        <div class="heightField">
            <label>Height:</label>
            <input type="number" placeholder="Height in cm..." @bind-value="height">
        </div>
        
        <div class="weightField">
            <label>Weight:</label>
            <input type="number" placeholder="Weight in kg..." @bind-value="weight">
        </div>
        
        <div class="eyeField">
            <label>Eye color:</label>
            <input placeholder="Eye color..." @bind-value="eyeColor">
        </div>
        
        <div class="hairField">
            <label>Hair color:</label>
            <input placeholder="Hair color..." @bind-value="hairColor">
        </div>

        <button type="button" @onclick="EditAdult">Apply changes</button>
    </div>
    
    <button type="button" @onclick="ToggleEdit">@editButtonText</button>
    <button type="button" @onclick="HideInfo">Hide info</button>
</div>

<ul>
    <li >            
        <input readonly style="@HeaderStyle" value="ID"/>
        <input readonly style="@HeaderStyle" value="First name"/>
        <input readonly style="@HeaderStyle" value="Last name"/>
        <input readonly style="@HeaderStyle" value="Age"/>
        <input readonly style="@HeaderStyle" value="Sex"/>

    </li>

    @foreach (var adult in adults)
    {
        <li>
            <input readonly @bind="adult.id"/>
            <input readonly @bind="adult.firstName"/>
            <input readonly @bind="adult.lastName"/>
            <input readonly @bind="adult.age"/>
            <input readonly @bind="adult.sex"/>

            <button type="button" @onclick="() => ShowInfo(adult)">View/hide more info</button>
        </li>
    }
</ul>

@code {
    // Filters
    private string nameSearch = "";
    private string jobSearch = "";
    private string gender = "any";
    private string ageFilter = "all";
    private int ageSearch = 0;
    private string heightFilter = "all";
    private int heightSearch = 0;
    private string weightFilter = "all";
    private int weightSearch = 0;
    private string salaryFilter = "all";
    private int salary = 0;
    private string eyeFilter = "all";
    private string hairFilter = "all";
    private IList<String> eyeColors = new List<String>();
    private IList<String> hairColors = new List<String>();

    private bool hideInfo = true;
    private bool hideInfoText = true;
    private bool hideEdit = true;
    private string editButtonText = "Edit adult";
    private string errorMessage = "";
    private string successMessage = "";

    private readonly string HeaderStyle = "text-shadow:0px 0px 2px black; background-color: #d1d1d1;";
    private IList<Adult> adults = new List<Adult>(new Adult[0]);

    private Adult selectedAdult;

    private string infoText = "No adult selected";
    
    // Properties
    private string firstName = "";
    private string lastName = "";
    private string eyeColor = "any";
    private string hairColor = "all";
    private int height = 0;
    private int weight = 0;
    private int age = 0;

    protected override async Task OnInitializedAsync()
    {
        Start();
    }
    
    public async void Start()
    {
        if (TheUser.userName == null)
        {
            Console.WriteLine("User is null! Navigating to login...");

            NavigationManager.NavigateTo("/login");
        }
        else
        {
            adults = await AdultsService.GetAdultsAsync();
            SetDropDowns(adults);
            StateHasChanged();
        }
    }

    public async void SetDropDowns(IList<Adult> adultList)
    {
        foreach (var adult in adultList)
        {
            if (!eyeColors.Contains(adult.eyeColor))
            {
                eyeColors.Add(adult.eyeColor);
            }
            if (!hairColors.Contains(adult.hairColor))
            {
                hairColors.Add(adult.hairColor);
            }
        }
    }

    public async void EditAdult()
    {
        if (AllFilled())
        {
            selectedAdult.firstName = firstName;
            selectedAdult.lastName = lastName;
            selectedAdult.eyeColor = eyeColor;
            selectedAdult.hairColor = hairColor;
            selectedAdult.height = height;
            selectedAdult.weight = weight;
            selectedAdult.age = age;
            await AdultsService.UpdateAsync(selectedAdult);
            Console.WriteLine("Adult edited!");
            successMessage = "Successfully edited adult!";
            errorMessage = "";
            ToggleEdit();
            StateHasChanged();
        }
    }
    
    public bool AllFilled() 
    {
            int empties = 0;
            errorMessage = "";
    
            if (firstName.Equals("") || firstName == null)
            {
                empties++;
            }
            if (lastName.Equals("") || lastName == null)
            {
                empties++;
            }
            if (age < 1 || age > 120)
            {
                empties++;
            }
            if (height < 1 || height > 300)
            {
                empties++;
            }
            if (weight < 1 || weight > 300)
            {
                empties++;
            }
            if (eyeColor.Equals("") || eyeColor == null)
            {
                empties++;
            }
            if (hairColor.Equals("") || hairColor == null)
            {
                empties++;
            }
            if (empties != 0)
            {
                errorMessage = "Please fill out all the fields with proper values!";
                successMessage = "";
            }
            return (empties == 0);
    }

    public void HideInfo()
    {
        hideInfo = true;
        hideInfoText = true;
        hideEdit = true;
        infoText = "";
        editButtonText = "Edit adult";
    }
    
    public void ToggleEdit() 
    {
        hideEdit = !hideEdit;
        hideInfoText = !hideEdit;
        if (hideEdit) 
        {
        editButtonText = "Edit adult";
        } 
        else
        {
        editButtonText = "Cancel edit";
        }
    }

    public void ShowInfo(Adult adult)
    {
        errorMessage = "";
        successMessage = "";
                    
        selectedAdult = adult;
        String infoToShow = BuildInfoText(adult);
        if (!infoText.Equals(infoToShow))
        {
            infoText = infoToShow;
            SetInfo();
            hideInfo = false;
            hideInfoText = false;
        }
        else
        {
            hideInfo = true;
            infoText = "No adult selected";
        }
        hideEdit = true;
    }

    public void SetInfo()
    {
        firstName = selectedAdult.firstName;
        lastName = selectedAdult.lastName;
        eyeColor = selectedAdult.eyeColor;
        hairColor = selectedAdult.hairColor;
        height = selectedAdult.height;
        weight = (int) selectedAdult.weight;
        age = selectedAdult.age;
    }
    
    public string BuildInfoText(Adult adult)
    {
        string str = "Info for '" + adult.firstName + " " + adult.lastName + "':\n\n";

        str += "ID: " + adult.id + "\n";
        str += "First name: " + adult.firstName + "\n";
        str += "Last name: " + adult.lastName + "\n";
        str += "Age: " + adult.age + "\n";
        str += "Sex: " + adult.sex + "\n";
        str += "Height: " + adult.height + "\n";
        str += "Weight: " + adult.weight + "\n";
        str += "Hair color: " + adult.hairColor + "\n";
        str += "Eye color: " + adult.eyeColor + "\n";
        if (adult.job == null)
        {
            Console.WriteLine("No job!");
        }
        else
        {
            str += "Job title: " + adult.job.jobTitle + "\n";
            str += "Salary: " + adult.job.salary + "\n";
        }

        return str;
    }

    public async void Search()
    {
        IList<Adult> allAdults = await AdultsService.GetAdultsAsync();

    IList<Adult> tempAdults = new List<Adult>();

        // We check filters
        foreach (var adult in allAdults)
        {
            bool passes = true;
    // Name
                if (!(adult.firstName.ToLower().Contains(nameSearch.ToLower()) || adult.lastName.ToLower().Contains(nameSearch.ToLower()) || (adult.firstName + " " + adult.lastName).ToLower().Contains(nameSearch.ToLower())))
                {
                    passes = false;
                    continue;
                }
                else
                {
    // Job
                    if (!(adult.job.jobTitle.Equals("") || adult.job.jobTitle.ToLower().Contains(jobSearch.ToLower())))
                    {
                        passes = false;
                        continue;
                    }
                    else
                    {
    // Gender
                        if (!(adult.sex.Equals(gender) || gender.Equals("any")))
                        {
                            passes = false;
                            continue;
                        }
                        else
                        {
    // Age
                            if (!(ageFilter.Equals("all")))
                            {
                                if (ageFilter.Equals("above") && adult.age < ageSearch)
                                {
                                    passes = false;
                                    continue;
                                }
                                else if (ageFilter.Equals("below") && adult.age > ageSearch)
                                {
                                    passes = false;
                                    continue;
                                }
                            }
    // Height
                                if (!(heightFilter.Equals("all")))
                                {
                                    if (heightFilter.Equals("above") && adult.height < heightSearch)
                                    {
                                        passes = false;
                                        continue;
                                    }
                                    else if (heightFilter.Equals("below") && adult.height > heightSearch)
                                    {
                                        passes = false;
                                        continue;
                                    }
                                }
    // Weight
                                    if (!(weightFilter.Equals("all")))
                                    {
                                        if (weightFilter.Equals("above") && adult.weight < weightSearch)
                                        {
                                            passes = false;
                                            continue;
                                        }
                                        else if (weightFilter.Equals("below") && adult.weight > weightSearch)
                                        {
                                            passes = false;
                                            continue;
                                        }
                                    }
                            
    // Salary
                            if (!(salaryFilter.Equals("all")))
                            {
                                if (salaryFilter.Equals("above") && adult.job.salary < salary)
                                {
                                    passes = false;
                                    continue;
                                }
                                else if (salaryFilter.Equals("below") && adult.job.salary > salary)
                                {
                                    passes = false;
                                    continue;
                                }
                            }
                            // Eyes
                            if (!(adult.eyeColor.Equals(eyeFilter) || eyeFilter.Equals("all")))
                            {
                                passes = false;
                                continue;
                            }
                            // Hair
                            if (!(adult.hairColor.Equals(hairFilter) || hairFilter.Equals("all")))
                            {
                                passes = false;
                                continue;
                            }
                                }
                            }
                        }
            if (passes)
                {
                    Console.WriteLine(adult.firstName + " passes filters!");
                    tempAdults.Add(adult);
                }
            }
        adults = tempAdults;
        
        StateHasChanged();
    }
}