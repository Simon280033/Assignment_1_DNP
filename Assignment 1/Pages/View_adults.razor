@page "/view_adults"
@using FileData
@using Microsoft.AspNetCore.Mvc.ModelBinding.Binders
@using Microsoft.Extensions.DependencyInjection
@using Models
@inject User TheUser
@inject NavigationManager NavigationManager

<h3>View adults</h3>

<h5>Filters</h5>

<div class="filters">
    <div class="nameSearch">
        <b><label>Name: </label></b>
        <input placeholder="Name..." @bind-value="nameSearch">
    </div>

    <div class="jobSearch">
        <b><label >Job: </label></b>
        <input placeholder="Job title..." @bind-value="jobSearch">
    </div>

    <div class="sexChoice">
        <b><label for="genders">Gender:</label></b>
        <select id="genders" name="genders" @bind="gender">
            <option value="any">Any</option>
            <option value="M">Male</option>
            <option value="F">Female</option>
        </select>
    </div>

    <div class="ageChoice">
        <b><label for="ages">Age:</label></b>
        <select id="ages" name="ages" @bind="ageFilter">
            <option value="all">Above/below</option>
            <option value="above">Above</option>
            <option value="below">Below</option>
        </select>
        <input type="number" placeholder="Age..." @bind-value="age">
    </div>

    <div class="heightChoice">
        <b><label for="heights">Height:</label></b>
        <select id="heights" name="heights" @bind="heightFilter">
            <option value="all">Above/below</option>
            <option value="above">Above</option>
            <option value="below">Below</option>
        </select>
        <input type="number" placeholder="Height in cm..." @bind-value="height">
    </div>

    <div class="weightChoice">
        <b><label for="weights">Weight:</label></b>
        <select id="weights" name="weights" @bind="weightFilter">
            <option value="all">Above/below</option>
            <option value="above">Above</option>
            <option value="below">Below</option>
        </select>
        <input type="number" placeholder="Weight in kg..." @bind-value="weight">
    </div>

    <div class="salaryChoice">
        <b><label for="salaries">Salary:</label></b>
        <select id="salaries" name="salaries" @bind="salaryFilter">
            <option value="all">Above/below</option>
            <option value="above">Above</option>
            <option value="below">Below</option>
        </select>
        <input type="number" placeholder="Salary in DKK..." @bind-value="salary">
    </div>

    <div class="eyeChoice">
        <b><label for="eyeColors">Eye color:</label></b>
        <select id="eyeColors" name="eyeColors" @bind="eyeFilter">
            <option value="all">Any</option>
            @foreach (var eyeColor in eyeColors)
            {
                <option>@eyeColor</option>
            }
        </select>
    </div>

    <div class="hairChoice">
        <b><label for="hairColors">Hair color:</label></b>
        <select id="hairColors" name="hairColors" @bind="hairFilter">
            <option value="all">Any</option>
            @foreach (var hairColor in hairColors)
            {
                <option>@hairColor</option>
            }
        </select>
    </div>
</div>

<button type="button" @onclick="Search">Search</button>

<div hidden="@hideInfo" style="border:2px; border-style:solid; border-color:#d1d1d1; padding: 1em; border-radius: 25px;">
    <p style="white-space: pre-wrap;" >@infoText</p>
    <button type="button" @onclick="HideInfo">Hide info</button>
</div>

<ul>
    <li >            
        <input readonly style="@HeaderStyle" value="ID"/>
        <input readonly style="@HeaderStyle" value="First name"/>
        <input readonly style="@HeaderStyle" value="Last name"/>
        <input readonly style="@HeaderStyle" value="Age"/>
        <input readonly style="@HeaderStyle" value="Sex"/>

    </li>

    @foreach (var adult in adults)
    {
        <li>
            <input readonly @bind="adult.Id"/>
            <input readonly @bind="adult.FirstName"/>
            <input readonly @bind="adult.LastName"/>
            <input readonly @bind="adult.Age"/>
            <input readonly @bind="adult.Sex"/>

            <button type="button" @onclick="() => ShowInfo(adult)">View/hide more info</button>
        </li>
    }
</ul>

@code {
    private string nameSearch = "";
    private string jobSearch = "";
    private string gender = "any";
    private string ageFilter = "all";
    private int age = 0;
    private string heightFilter = "all";
    private int height = 0;
    private string weightFilter = "all";
    private int weight = 0;
    private string salaryFilter = "all";
    private int salary = 0;
    private string eyeFilter = "all";
    private string hairFilter = "all";
    private IList<String> eyeColors = new List<String>();
    private IList<String> hairColors = new List<String>();

    private bool hideInfo = true;
    private readonly string HeaderStyle = "text-shadow:0px 0px 2px black; background-color: #d1d1d1;";
    private IList<Adult> adults = new List<Adult>();

    private string infoText = "No adult selected";
    
    IFileContext fc = new FileContext();

    protected override async Task OnInitializedAsync()
    {
        Start();
    }
    
    public void Start()
    {
        if (TheUser.UserName == null)
        {
            Console.WriteLine("User is null! Navigating to login...");

            NavigationManager.NavigateTo("/login");
        }
        else
        {
            adults = fc.Adults;
            SetDropDowns(adults);
        }
    }

    public void SetDropDowns(IList<Adult> adultList)
    {
        foreach (var adult in adultList)
        {
            if (!eyeColors.Contains(adult.EyeColor))
            {
                eyeColors.Add(adult.EyeColor);
            }
            if (!hairColors.Contains(adult.HairColor))
            {
                hairColors.Add(adult.HairColor);
            }
        }
    }

    public void HideInfo()
    {
        hideInfo = true;
        infoText = "";
    }

    public void ShowInfo(Adult adult)
    {
        String infoToShow = BuildInfoText(adult);
        if (!infoText.Equals(infoToShow))
        {
            infoText = infoToShow;
            hideInfo = false;
        }
        else
        {
            hideInfo = true;
            infoText = "No adult selected";
        }
    }

    public string BuildInfoText(Adult adult)
    {
        string str = "Info for '" + adult.FirstName + " " + adult.LastName + "':\n\n";

        str += "ID: " + adult.Id + "\n";
        str += "First name: " + adult.FirstName + "\n";
        str += "Last name: " + adult.LastName + "\n";
        str += "Age: " + adult.Age + "\n";
        str += "Sex: " + adult.Sex + "\n";
        str += "Height: " + adult.Height + "\n";
        str += "Weight: " + adult.Weight + "\n";
        str += "Hair color: " + adult.HairColor + "\n";
        str += "Eye color: " + adult.EyeColor + "\n";
        str += "Job title: " + adult.JobTitle.JobTitle + "\n";
        str += "Salary: " + adult.JobTitle.Salary + "\n";

        return str;
    }

    public void Search()
    {
        IList<Adult> allAdults = fc.Adults;

    IList<Adult> tempAdults = new List<Adult>();

        // We check filters
        foreach (var adult in allAdults)
        {
            bool passes = true;
    // Name
                if (!(adult.FirstName.ToLower().Contains(nameSearch.ToLower()) || adult.LastName.ToLower().Contains(nameSearch.ToLower()) || (adult.FirstName + " " + adult.LastName).ToLower().Contains(nameSearch.ToLower())))
                {
                    passes = false;
                    continue;
                }
                else
                {
    // Job
                    if (!(adult.JobTitle.JobTitle.Equals("") || adult.JobTitle.JobTitle.ToLower().Contains(jobSearch.ToLower())))
                    {
                        passes = false;
                        continue;
                    }
                    else
                    {
    // Gender
                        if (!(adult.Sex.Equals(gender) || gender.Equals("any")))
                        {
                            passes = false;
                            continue;
                        }
                        else
                        {
    // Age
                            if (!(ageFilter.Equals("all")))
                            {
                                if (ageFilter.Equals("above") && adult.Age < age)
                                {
                                    passes = false;
                                    continue;
                                }
                                else if (ageFilter.Equals("below") && adult.Age > age)
                                {
                                    passes = false;
                                    continue;
                                }
                            }
    // Height
                                if (!(heightFilter.Equals("all")))
                                {
                                    if (heightFilter.Equals("above") && adult.Height < height)
                                    {
                                        passes = false;
                                        continue;
                                    }
                                    else if (heightFilter.Equals("below") && adult.Height > height)
                                    {
                                        passes = false;
                                        continue;
                                    }
                                }
    // Weight
                                    if (!(weightFilter.Equals("all")))
                                    {
                                        if (weightFilter.Equals("above") && adult.Weight < weight)
                                        {
                                            passes = false;
                                            continue;
                                        }
                                        else if (weightFilter.Equals("below") && adult.Weight > weight)
                                        {
                                            passes = false;
                                            continue;
                                        }
                                    }
                            
    // Salary
                            if (!(salaryFilter.Equals("all")))
                            {
                                if (salaryFilter.Equals("above") && adult.JobTitle.Salary < salary)
                                {
                                    passes = false;
                                    continue;
                                }
                                else if (salaryFilter.Equals("below") && adult.JobTitle.Salary > salary)
                                {
                                    passes = false;
                                    continue;
                                }
                            }
                            // Eyes
                            if (!(adult.EyeColor.Equals(eyeFilter) || eyeFilter.Equals("all")))
                            {
                                passes = false;
                                continue;
                            }
                            // Hair
                            if (!(adult.HairColor.Equals(hairFilter) || hairFilter.Equals("all")))
                            {
                                passes = false;
                                continue;
                            }
                                }
                            }
                        }
            if (passes)
                {
                    Console.WriteLine(adult.FirstName + " passes filters!");
                    tempAdults.Add(adult);
                }
            }
        adults = tempAdults;
    }
}